//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 10 colors.
  struct color {
    /// Color `alarm-card-background-gray`.
    static let alarmCardBackgroundGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "alarm-card-background-gray")
    /// Color `alarm-card-background-green`.
    static let alarmCardBackgroundGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "alarm-card-background-green")
    /// Color `brownColor`.
    static let brownColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "brownColor")
    /// Color `call-green`.
    static let callGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "call-green")
    /// Color `call-red`.
    static let callRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "call-red")
    /// Color `charalarm-default-gray`.
    static let charalarmDefaultGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "charalarm-default-gray")
    /// Color `charalarm-default-green`.
    static let charalarmDefaultGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "charalarm-default-green")
    /// Color `charalarm-default-pink`.
    static let charalarmDefaultPink = Rswift.ColorResource(bundle: R.hostingBundle, name: "charalarm-default-pink")
    /// Color `textColor`.
    static let textColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "textColor")
    /// Color `xxxxColor`.
    static let xxxxColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "xxxxColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "alarm-card-background-gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func alarmCardBackgroundGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.alarmCardBackgroundGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "alarm-card-background-green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func alarmCardBackgroundGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.alarmCardBackgroundGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "brownColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func brownColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.brownColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "call-green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func callGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.callGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "call-red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func callRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.callRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "charalarm-default-gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func charalarmDefaultGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.charalarmDefaultGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "charalarm-default-green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func charalarmDefaultGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.charalarmDefaultGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "charalarm-default-pink", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func charalarmDefaultPink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.charalarmDefaultPink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "xxxxColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func xxxxColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.xxxxColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 30 files.
  struct file {
    /// Resource file `Resource`.
    static let resource = Rswift.FileResource(bundle: R.hostingBundle, name: "Resource", pathExtension: "")
    /// Resource file `Settings.bundle`.
    static let settingsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Settings", pathExtension: "bundle")
    /// Resource file `com-charalarm-yui-0.caf`.
    static let comCharalarmYui0Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-0", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-1.caf`.
    static let comCharalarmYui1Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-1", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-10.caf`.
    static let comCharalarmYui10Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-10", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-11.caf`.
    static let comCharalarmYui11Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-11", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-12.caf`.
    static let comCharalarmYui12Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-12", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-13.caf`.
    static let comCharalarmYui13Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-13", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-14.caf`.
    static let comCharalarmYui14Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-14", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-15.caf`.
    static let comCharalarmYui15Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-15", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-16.caf`.
    static let comCharalarmYui16Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-16", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-17.caf`.
    static let comCharalarmYui17Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-17", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-18.caf`.
    static let comCharalarmYui18Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-18", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-19.caf`.
    static let comCharalarmYui19Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-19", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-2.caf`.
    static let comCharalarmYui2Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-2", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-20.caf`.
    static let comCharalarmYui20Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-20", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-3.caf`.
    static let comCharalarmYui3Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-3", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-4.caf`.
    static let comCharalarmYui4Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-4", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-5.caf`.
    static let comCharalarmYui5Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-5", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-6.caf`.
    static let comCharalarmYui6Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-6", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-7.caf`.
    static let comCharalarmYui7Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-7", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-8.caf`.
    static let comCharalarmYui8Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-8", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-9.caf`.
    static let comCharalarmYui9Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-9", pathExtension: "caf")
    /// Resource file `comfused.png`.
    static let comfusedPng = Rswift.FileResource(bundle: R.hostingBundle, name: "comfused", pathExtension: "png")
    /// Resource file `normal.png`.
    static let normalPng = Rswift.FileResource(bundle: R.hostingBundle, name: "normal", pathExtension: "png")
    /// Resource file `pokemon.caf`.
    static let pokemonCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "pokemon", pathExtension: "caf")
    /// Resource file `resource.json`.
    static let resourceJson = Rswift.FileResource(bundle: R.hostingBundle, name: "resource", pathExtension: "json")
    /// Resource file `self-introduction.caf`.
    static let selfIntroductionCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "self-introduction", pathExtension: "caf")
    /// Resource file `smile.png`.
    static let smilePng = Rswift.FileResource(bundle: R.hostingBundle, name: "smile", pathExtension: "png")
    /// Resource file `thumbnail.png`.
    static let thumbnailPng = Rswift.FileResource(bundle: R.hostingBundle, name: "thumbnail", pathExtension: "png")

    /// `bundle.url(forResource: "Resource", withExtension: "")`
    static func resource(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.resource
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Settings", withExtension: "bundle")`
    static func settingsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.settingsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-0", withExtension: "caf")`
    static func comCharalarmYui0Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui0Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-1", withExtension: "caf")`
    static func comCharalarmYui1Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui1Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-10", withExtension: "caf")`
    static func comCharalarmYui10Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui10Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-11", withExtension: "caf")`
    static func comCharalarmYui11Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui11Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-12", withExtension: "caf")`
    static func comCharalarmYui12Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui12Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-13", withExtension: "caf")`
    static func comCharalarmYui13Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui13Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-14", withExtension: "caf")`
    static func comCharalarmYui14Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui14Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-15", withExtension: "caf")`
    static func comCharalarmYui15Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui15Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-16", withExtension: "caf")`
    static func comCharalarmYui16Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui16Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-17", withExtension: "caf")`
    static func comCharalarmYui17Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui17Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-18", withExtension: "caf")`
    static func comCharalarmYui18Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui18Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-19", withExtension: "caf")`
    static func comCharalarmYui19Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui19Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-2", withExtension: "caf")`
    static func comCharalarmYui2Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui2Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-20", withExtension: "caf")`
    static func comCharalarmYui20Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui20Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-3", withExtension: "caf")`
    static func comCharalarmYui3Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui3Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-4", withExtension: "caf")`
    static func comCharalarmYui4Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui4Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-5", withExtension: "caf")`
    static func comCharalarmYui5Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui5Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-6", withExtension: "caf")`
    static func comCharalarmYui6Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui6Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-7", withExtension: "caf")`
    static func comCharalarmYui7Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui7Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-8", withExtension: "caf")`
    static func comCharalarmYui8Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui8Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-9", withExtension: "caf")`
    static func comCharalarmYui9Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui9Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "comfused", withExtension: "png")`
    static func comfusedPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comfusedPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "normal", withExtension: "png")`
    static func normalPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.normalPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pokemon", withExtension: "caf")`
    static func pokemonCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pokemonCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "resource", withExtension: "json")`
    static func resourceJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.resourceJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "self-introduction", withExtension: "caf")`
    static func selfIntroductionCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.selfIntroductionCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "smile", withExtension: "png")`
    static func smilePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.smilePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "thumbnail", withExtension: "png")`
    static func thumbnailPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.thumbnailPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 32 images.
  struct image {
    /// Image `alarm-add-icon`.
    static let alarmAddIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "alarm-add-icon")
    /// Image `background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "background")
    /// Image `call-alarm`.
    static let callAlarm = Rswift.ImageResource(bundle: R.hostingBundle, name: "call-alarm")
    /// Image `character-placeholder`.
    static let characterPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "character-placeholder")
    /// Image `comfused`.
    static let comfused = Rswift.ImageResource(bundle: R.hostingBundle, name: "comfused")
    /// Image `common-back-icon`.
    static let commonBackIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "common-back-icon")
    /// Image `common-icon-close`.
    static let commonIconClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "common-icon-close")
    /// Image `momiji`.
    static let momiji = Rswift.ImageResource(bundle: R.hostingBundle, name: "momiji")
    /// Image `normal`.
    static let normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "normal")
    /// Image `profile-call-end`.
    static let profileCallEnd = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile-call-end")
    /// Image `profile-call`.
    static let profileCall = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile-call")
    /// Image `profile-check`.
    static let profileCheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile-check")
    /// Image `profile-menu-icon`.
    static let profileMenuIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile-menu-icon")
    /// Image `profile-open-url`.
    static let profileOpenUrl = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile-open-url")
    /// Image `profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile")
    /// Image `sd-angly`.
    static let sdAngly = Rswift.ImageResource(bundle: R.hostingBundle, name: "sd-angly")
    /// Image `sd-close`.
    static let sdClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "sd-close")
    /// Image `sd-expressionless`.
    static let sdExpressionless = Rswift.ImageResource(bundle: R.hostingBundle, name: "sd-expressionless")
    /// Image `sd-happly`.
    static let sdHapply = Rswift.ImageResource(bundle: R.hostingBundle, name: "sd-happly")
    /// Image `sd-normal`.
    static let sdNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "sd-normal")
    /// Image `sd-sad`.
    static let sdSad = Rswift.ImageResource(bundle: R.hostingBundle, name: "sd-sad")
    /// Image `sd-smile`.
    static let sdSmile = Rswift.ImageResource(bundle: R.hostingBundle, name: "sd-smile")
    /// Image `sd-suprised`.
    static let sdSuprised = Rswift.ImageResource(bundle: R.hostingBundle, name: "sd-suprised")
    /// Image `smile`.
    static let smile = Rswift.ImageResource(bundle: R.hostingBundle, name: "smile")
    /// Image `thumbnail`.
    static let thumbnail = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumbnail")
    /// Image `top-alarm`.
    static let topAlarm = Rswift.ImageResource(bundle: R.hostingBundle, name: "top-alarm")
    /// Image `top-config`.
    static let topConfig = Rswift.ImageResource(bundle: R.hostingBundle, name: "top-config")
    /// Image `top-news`.
    static let topNews = Rswift.ImageResource(bundle: R.hostingBundle, name: "top-news")
    /// Image `top-person`.
    static let topPerson = Rswift.ImageResource(bundle: R.hostingBundle, name: "top-person")
    /// Image `tutorial-alarm-screen-shot`.
    static let tutorialAlarmScreenShot = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorial-alarm-screen-shot")
    /// Image `tutorial-chara-list-screen-shot`.
    static let tutorialCharaListScreenShot = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorial-chara-list-screen-shot")
    /// Image `tutorial-normal`.
    static let tutorialNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorial-normal")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alarm-add-icon", bundle: ..., traitCollection: ...)`
    static func alarmAddIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alarmAddIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "call-alarm", bundle: ..., traitCollection: ...)`
    static func callAlarm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.callAlarm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "character-placeholder", bundle: ..., traitCollection: ...)`
    static func characterPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.characterPlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "comfused", bundle: ..., traitCollection: ...)`
    static func comfused(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comfused, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "common-back-icon", bundle: ..., traitCollection: ...)`
    static func commonBackIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonBackIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "common-icon-close", bundle: ..., traitCollection: ...)`
    static func commonIconClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonIconClose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "momiji", bundle: ..., traitCollection: ...)`
    static func momiji(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.momiji, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "normal", bundle: ..., traitCollection: ...)`
    static func normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile-call", bundle: ..., traitCollection: ...)`
    static func profileCall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileCall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile-call-end", bundle: ..., traitCollection: ...)`
    static func profileCallEnd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileCallEnd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile-check", bundle: ..., traitCollection: ...)`
    static func profileCheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileCheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile-menu-icon", bundle: ..., traitCollection: ...)`
    static func profileMenuIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileMenuIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile-open-url", bundle: ..., traitCollection: ...)`
    static func profileOpenUrl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileOpenUrl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd-angly", bundle: ..., traitCollection: ...)`
    static func sdAngly(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sdAngly, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd-close", bundle: ..., traitCollection: ...)`
    static func sdClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sdClose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd-expressionless", bundle: ..., traitCollection: ...)`
    static func sdExpressionless(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sdExpressionless, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd-happly", bundle: ..., traitCollection: ...)`
    static func sdHapply(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sdHapply, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd-normal", bundle: ..., traitCollection: ...)`
    static func sdNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sdNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd-sad", bundle: ..., traitCollection: ...)`
    static func sdSad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sdSad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd-smile", bundle: ..., traitCollection: ...)`
    static func sdSmile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sdSmile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd-suprised", bundle: ..., traitCollection: ...)`
    static func sdSuprised(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sdSuprised, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smile", bundle: ..., traitCollection: ...)`
    static func smile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "thumbnail", bundle: ..., traitCollection: ...)`
    static func thumbnail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumbnail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "top-alarm", bundle: ..., traitCollection: ...)`
    static func topAlarm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topAlarm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "top-config", bundle: ..., traitCollection: ...)`
    static func topConfig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topConfig, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "top-news", bundle: ..., traitCollection: ...)`
    static func topNews(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topNews, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "top-person", bundle: ..., traitCollection: ...)`
    static func topPerson(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topPerson, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tutorial-alarm-screen-shot", bundle: ..., traitCollection: ...)`
    static func tutorialAlarmScreenShot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorialAlarmScreenShot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tutorial-chara-list-screen-shot", bundle: ..., traitCollection: ...)`
    static func tutorialCharaListScreenShot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorialCharaListScreenShot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tutorial-normal", bundle: ..., traitCollection: ...)`
    static func tutorialNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorialNormal, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 2 localization keys.
    struct infoPlist {
      /// en translation: Charalarm
      ///
      /// Locales: ja, en
      static let cfBundleDisplayName = Rswift.StringResource(key: "CFBundleDisplayName", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: This identifier will be used to deliver personalized ads to you.
      ///
      /// Locales: ja, en
      static let nsUserTrackingUsageDescription = Rswift.StringResource(key: "NSUserTrackingUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)

      /// en translation: Charalarm
      ///
      /// Locales: ja, en
      static func cfBundleDisplayName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CFBundleDisplayName", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "CFBundleDisplayName"
        }

        return NSLocalizedString("CFBundleDisplayName", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// en translation: This identifier will be used to deliver personalized ads to you.
      ///
      /// Locales: ja, en
      static func nsUserTrackingUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSUserTrackingUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSUserTrackingUsageDescription"
        }

        return NSLocalizedString("NSUserTrackingUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 83 localization keys.
    struct localizable {
      /// en translation:  The operation and development of Charalarm is supported by advertising revenue.  nPlease allow us to use the information necessary to display the appropriate advertisement
      ///
      /// Locales: ja, en
      static let tutorialCharalarmDevelopmentIsSupportedByAdvertisingRevenue = Rswift.StringResource(key: "tutorial-charalarm-development-is-supported-by-advertising-revenue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Add Alarm
      ///
      /// Locales: ja, en
      static let alarmAddAlarm = Rswift.StringResource(key: "alarm-add-alarm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Alarm Name
      ///
      /// Locales: ja, en
      static let alarmAlarmName = Rswift.StringResource(key: "alarm-alarm-name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: An unknown error has occurred.
      ///
      /// Locales: ja, en
      static let errorAnUnknownErrorHasOccurred = Rswift.StringResource(key: "error-an-unknown-error-has-occurred", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Application Info
      ///
      /// Locales: ja, en
      static let configApplicationInfo = Rswift.StringResource(key: "config-application-info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Are you sure you want to reset the app?
      ///
      /// Locales: ja, en
      static let configAreYouSureYouWantToResetTheApp = Rswift.StringResource(key: "config-are-you-sure-you-want-to-reset-the-app", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: ja, en
      static let commonCancel = Rswift.StringResource(key: "common-cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Character List
      ///
      /// Locales: ja, en
      static let characterCharacterList = Rswift.StringResource(key: "character-character-list", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Character selection
      ///
      /// Locales: ja, en
      static let profileCharacterSelection = Rswift.StringResource(key: "profile-character-selection", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: ja, en
      static let commonClose = Rswift.StringResource(key: "common-close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Config
      ///
      /// Locales: ja, en
      static let configConfig = Rswift.StringResource(key: "config-config", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Customize your ads!
      ///
      /// Locales: ja, en
      static let tutorialCustomizeYourAds = Rswift.StringResource(key: "tutorial-customize-your-ads", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Delete Alarm
      ///
      /// Locales: ja, en
      static let alarmDeleteAlarm = Rswift.StringResource(key: "alarm-delete-alarm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Did you get a call?
      ///
      /// Locales: ja, en
      static let tutorialDidYouGetACall = Rswift.StringResource(key: "tutorial-did-you-get-a-call", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Do not allow the use of information
      ///
      /// Locales: ja, en
      static let tutorialDoNotAllowUseOfInfomation = Rswift.StringResource(key: "tutorial-do-not-allow-use-of-infomation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Downloading resources
      ///
      /// Locales: ja, en
      static let profileDownloadingResources = Rswift.StringResource(key: "profile-downloading-resources", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Edit Alarm
      ///
      /// Locales: ja, en
      static let alarmEditAlarm = Rswift.StringResource(key: "alarm-edit-alarm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Faild to connect with ther server. Please wait a while and try later.
      ///
      /// Locales: ja, en
      static let commonFailedToConnectWithTheServer = Rswift.StringResource(key: "common-failed-to-connect-with-the-server.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Failed to create an alarm.
      ///
      /// Locales: ja, en
      static let alarmFailedToCreateAnAlarm = Rswift.StringResource(key: "alarm-failed-to-create-an-alarm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Failed to download resources
      ///
      /// Locales: ja, en
      static let profileFailedToDownloadResources = Rswift.StringResource(key: "profile-failed-to-download-resources", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Failed to edit the alarm.
      ///
      /// Locales: ja, en
      static let alarmFailedToEditTheAlarm = Rswift.StringResource(key: "alarm-failed-to-edit-the-alarm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Failed to get the alarm list.
      ///
      /// Locales: ja, en
      static let alarmFailedToGetTheAlarmList = Rswift.StringResource(key: "alarm-failed-to-get-the-alarm-list", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Failed to get the authentication information
      ///
      /// Locales: ja, en
      static let errorFailedToGetAuthenticationInformation = Rswift.StringResource(key: "error-failed-to-get-authentication-information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Failed to get the character information
      ///
      /// Locales: ja, en
      static let errorFailedToGetCharacterInformation = Rswift.StringResource(key: "error-failed-to-get-character-information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Failed to get the character information.
      ///
      /// Locales: ja, en
      static let profileFailedToGetTheCharacterInformation = Rswift.StringResource(key: "profile-failed-to-get-the-character-information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Failed to get the character selection information
      ///
      /// Locales: ja, en
      static let errorFailedToGetCharacterSelectionInformation = Rswift.StringResource(key: "error-failed-to-get-character-selection-information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Failed to get the character's resources
      ///
      /// Locales: ja, en
      static let errorFailedToGetCharactersResources = Rswift.StringResource(key: "error-failed-to-get-characters-resources", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Failed to get the character.
      ///
      /// Locales: ja, en
      static let characterFailedToGetTheCharacter = Rswift.StringResource(key: "character-failed-to-get-the-character", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Failed to get the news.
      ///
      /// Locales: ja, en
      static let newsFailedToGetTheNews = Rswift.StringResource(key: "news-failed-to-get-the-news", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Failed to get the resource of the character.
      ///
      /// Locales: ja, en
      static let profileFailedToGetTheResourceOfTheCharacter = Rswift.StringResource(key: "profile-failed-to-get-the-resource-of-the-character", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Failed to save user information.
      ///
      /// Locales: ja, en
      static let tutorialFailedToSaveUserInformation = Rswift.StringResource(key: "tutorial-failed-to-save-user-information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Failed to set character image
      ///
      /// Locales: ja, en
      static let errorFailedToSetCharacterImage = Rswift.StringResource(key: "error-failed-to-set-character-image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Finally, please allow push notifications, such as to announce the addition of new characters.
      ///
      /// Locales: ja, en
      static let tutorialFinallyPleaseAllowPushNotificaion = Rswift.StringResource(key: "tutorial-finally-please-allow-push-notificaion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Fri
      ///
      /// Locales: ja, en
      static let dayOfWeekFriday = Rswift.StringResource(key: "day-of-week-friday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Get a call
      ///
      /// Locales: ja, en
      static let tutorialGetACall = Rswift.StringResource(key: "tutorial-get-a-call", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Go to home screen
      ///
      /// Locales: ja, en
      static let tutorialGoToHomeScreen = Rswift.StringResource(key: "tutorial-go-to-home-screen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: I agree with the privacy policy
      ///
      /// Locales: ja, en
      static let tutorialAgreeWithThePrivacyPolicy = Rswift.StringResource(key: "tutorial-agree-with-the-privacy-policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Illustration
      ///
      /// Locales: ja, en
      static let characterIllustration = Rswift.StringResource(key: "character-illustration", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Illustration
      ///
      /// Locales: ja, en
      static let profileIllustration = Rswift.StringResource(key: "profile-illustration", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Inquiries about adding characters
      ///
      /// Locales: ja, en
      static let configInquiresAddingCharacters = Rswift.StringResource(key: "config-inquires-adding-characters", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Inquiries about the app
      ///
      /// Locales: ja, en
      static let configInquiresAboutTheApp = Rswift.StringResource(key: "config-inquires-about-the-app", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Let's try it now!
      ///
      /// Locales: ja, en
      static let tutorialLetUsTryItNow = Rswift.StringResource(key: "tutorial-let-us-try-it-now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: License
      ///
      /// Locales: ja, en
      static let configLicense = Rswift.StringResource(key: "config-license", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Mon
      ///
      /// Locales: ja, en
      static let dayOfWeekMonday = Rswift.StringResource(key: "day-of-week-monday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: ja, en
      static let profileName = Rswift.StringResource(key: "profile-name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: New Alarm
      ///
      /// Locales: ja, en
      static let alarmNewAlarm = Rswift.StringResource(key: "alarm-new-alarm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: News
      ///
      /// Locales: ja, en
      static let newsNews = Rswift.StringResource(key: "news-news", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: ja, en
      static let commonNext = Rswift.StringResource(key: "common-next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Official Twitter
      ///
      /// Locales: ja, en
      static let configOfficialTwitter = Rswift.StringResource(key: "config-official-twitter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Open App Store
      ///
      /// Locales: ja, en
      static let updateRequirdOpenAppStore = Rswift.StringResource(key: "update-requird-open-app-store", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Open the privacy policy
      ///
      /// Locales: ja, en
      static let tutorialOpenThePrivacyPolicy = Rswift.StringResource(key: "tutorial-open-the-privacy-policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Other
      ///
      /// Locales: ja, en
      static let configOther = Rswift.StringResource(key: "config-other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: PR
      ///
      /// Locales: ja, en
      static let characterPr = Rswift.StringResource(key: "character-pr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Please accept the privacy policy
      ///
      /// Locales: ja, en
      static let tutorialPleaseAcceptThePrivacyPolicy = Rswift.StringResource(key: "tutorial-please-accept-the-privacy-policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Please choose your favorite character.
      ///
      /// Locales: ja, en
      static let tutorialPleaseChooseYourFavoriteCharacter = Rswift.StringResource(key: "tutorial-please-choose-your-favorite-character", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Please enter the alarm name
      ///
      /// Locales: ja, en
      static let alarmPleaseEnterTheAlarmName = Rswift.StringResource(key: "alarm-please-enter-the-alarm-name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Please install the latest version of the app from the store.
      ///
      /// Locales: ja, en
      static let updateRequirdPleaseInstallTheLatestVersion = Rswift.StringResource(key: "update-requird-please-install-the-latest-version", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Profile
      ///
      /// Locales: ja, en
      static let profileProfile = Rswift.StringResource(key: "profile-profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Reset
      ///
      /// Locales: ja, en
      static let configReset = Rswift.StringResource(key: "config-reset", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Sat
      ///
      /// Locales: ja, en
      static let dayOfWeekSaturday = Rswift.StringResource(key: "day-of-week-saturday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: ja, en
      static let commonSave = Rswift.StringResource(key: "common-save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Show customized ads
      ///
      /// Locales: ja, en
      static let tutorialShowCustomizedAds = Rswift.StringResource(key: "tutorial-show-customized-ads", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Sun
      ///
      /// Locales: ja, en
      static let dayOfWeekSunday = Rswift.StringResource(key: "day-of-week-sunday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: The app needs to be updated.
      ///
      /// Locales: ja, en
      static let updateRequirdTheAppNeedsToBeUpdated = Rswift.StringResource(key: "update-requird-the-app-needs-to-be-updated", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: This app is an app that the character calls at the time you set.
      ///
      /// Locales: ja, en
      static let tutorialThisIsAnApp = Rswift.StringResource(key: "tutorial-this-is-an-app", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: This feature is not available in your region
      ///
      /// Locales: ja, en
      static let errorThisFeatureIsNotAvailableInYourRegion = Rswift.StringResource(key: "error-this-feature-is-not-available-in-your-region", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Thu
      ///
      /// Locales: ja, en
      static let dayOfWeekThursday = Rswift.StringResource(key: "day-of-week-thursday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Tue
      ///
      /// Locales: ja, en
      static let dayOfWeekTuesday = Rswift.StringResource(key: "day-of-week-tuesday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Update Requird
      ///
      /// Locales: ja, en
      static let updateRequirdUpdateRequird = Rswift.StringResource(key: "update-requird-update-requird", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: User Info
      ///
      /// Locales: ja, en
      static let configUserInfo = Rswift.StringResource(key: "config-user-info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: User Info
      ///
      /// Locales: ja, en
      static let userInfoUserInfo = Rswift.StringResource(key: "user-info-user-info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: User Name
      ///
      /// Locales: ja, en
      static let userInfoUserName = Rswift.StringResource(key: "user-info-user-name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Version Info
      ///
      /// Locales: ja, en
      static let configVersionInfo = Rswift.StringResource(key: "config-version-info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Voice
      ///
      /// Locales: ja, en
      static let characterVoice = Rswift.StringResource(key: "character-voice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Voice
      ///
      /// Locales: ja, en
      static let profileVoice = Rswift.StringResource(key: "profile-voice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Want to call this character?
      ///
      /// Locales: ja, en
      static let profileWantToCallThisCharacter = Rswift.StringResource(key: "profile-want-to-call-this-character", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Want to publish your character  with this app?  Click here for details!!
      ///
      /// Locales: ja, en
      static let characterWantToPublishYourCharacter = Rswift.StringResource(key: "character-want-to-publish-your-character", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Wed
      ///
      /// Locales: ja, en
      static let dayOfWeekWednesday = Rswift.StringResource(key: "day-of-week-wednesday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Welcome to Charalarm!!
      ///
      /// Locales: ja, en
      static let tutorialWelcomeToCharalarm = Rswift.StringResource(key: "tutorial-welcome-to-charalarm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Yes!!
      ///
      /// Locales: ja, en
      static let profileYes = Rswift.StringResource(key: "profile-yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: You can create up to three alarms.
      ///
      /// Locales: ja, en
      static let alarmYouCanCreateUpToThreeAlarms = Rswift.StringResource(key: "alarm-you-can-create-up-to-three-alarms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: You can see the characters that can receive incoming calls from the character list.
      ///
      /// Locales: ja, en
      static let tutorialYouCanSeeTheCharacters = Rswift.StringResource(key: "tutorial-you-can-see-the-characters", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: You can set multiple alarms by specifying the time and day of the week.
      ///
      /// Locales: ja, en
      static let tutorialYouCanSetMultipleAlarms = Rswift.StringResource(key: "tutorial-you-can-set-multiple-alarms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)

      /// en translation:  The operation and development of Charalarm is supported by advertising revenue.  nPlease allow us to use the information necessary to display the appropriate advertisement
      ///
      /// Locales: ja, en
      static func tutorialCharalarmDevelopmentIsSupportedByAdvertisingRevenue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial-charalarm-development-is-supported-by-advertising-revenue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial-charalarm-development-is-supported-by-advertising-revenue"
        }

        return NSLocalizedString("tutorial-charalarm-development-is-supported-by-advertising-revenue", bundle: bundle, comment: "")
      }

      /// en translation: Add Alarm
      ///
      /// Locales: ja, en
      static func alarmAddAlarm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alarm-add-alarm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alarm-add-alarm"
        }

        return NSLocalizedString("alarm-add-alarm", bundle: bundle, comment: "")
      }

      /// en translation: Alarm Name
      ///
      /// Locales: ja, en
      static func alarmAlarmName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alarm-alarm-name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alarm-alarm-name"
        }

        return NSLocalizedString("alarm-alarm-name", bundle: bundle, comment: "")
      }

      /// en translation: An unknown error has occurred.
      ///
      /// Locales: ja, en
      static func errorAnUnknownErrorHasOccurred(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error-an-unknown-error-has-occurred", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error-an-unknown-error-has-occurred"
        }

        return NSLocalizedString("error-an-unknown-error-has-occurred", bundle: bundle, comment: "")
      }

      /// en translation: Application Info
      ///
      /// Locales: ja, en
      static func configApplicationInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("config-application-info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "config-application-info"
        }

        return NSLocalizedString("config-application-info", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to reset the app?
      ///
      /// Locales: ja, en
      static func configAreYouSureYouWantToResetTheApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("config-are-you-sure-you-want-to-reset-the-app", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "config-are-you-sure-you-want-to-reset-the-app"
        }

        return NSLocalizedString("config-are-you-sure-you-want-to-reset-the-app", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: ja, en
      static func commonCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common-cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common-cancel"
        }

        return NSLocalizedString("common-cancel", bundle: bundle, comment: "")
      }

      /// en translation: Character List
      ///
      /// Locales: ja, en
      static func characterCharacterList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("character-character-list", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "character-character-list"
        }

        return NSLocalizedString("character-character-list", bundle: bundle, comment: "")
      }

      /// en translation: Character selection
      ///
      /// Locales: ja, en
      static func profileCharacterSelection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile-character-selection", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile-character-selection"
        }

        return NSLocalizedString("profile-character-selection", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: ja, en
      static func commonClose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common-close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common-close"
        }

        return NSLocalizedString("common-close", bundle: bundle, comment: "")
      }

      /// en translation: Config
      ///
      /// Locales: ja, en
      static func configConfig(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("config-config", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "config-config"
        }

        return NSLocalizedString("config-config", bundle: bundle, comment: "")
      }

      /// en translation: Customize your ads!
      ///
      /// Locales: ja, en
      static func tutorialCustomizeYourAds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial-customize-your-ads", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial-customize-your-ads"
        }

        return NSLocalizedString("tutorial-customize-your-ads", bundle: bundle, comment: "")
      }

      /// en translation: Delete Alarm
      ///
      /// Locales: ja, en
      static func alarmDeleteAlarm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alarm-delete-alarm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alarm-delete-alarm"
        }

        return NSLocalizedString("alarm-delete-alarm", bundle: bundle, comment: "")
      }

      /// en translation: Did you get a call?
      ///
      /// Locales: ja, en
      static func tutorialDidYouGetACall(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial-did-you-get-a-call", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial-did-you-get-a-call"
        }

        return NSLocalizedString("tutorial-did-you-get-a-call", bundle: bundle, comment: "")
      }

      /// en translation: Do not allow the use of information
      ///
      /// Locales: ja, en
      static func tutorialDoNotAllowUseOfInfomation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial-do-not-allow-use-of-infomation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial-do-not-allow-use-of-infomation"
        }

        return NSLocalizedString("tutorial-do-not-allow-use-of-infomation", bundle: bundle, comment: "")
      }

      /// en translation: Downloading resources
      ///
      /// Locales: ja, en
      static func profileDownloadingResources(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile-downloading-resources", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile-downloading-resources"
        }

        return NSLocalizedString("profile-downloading-resources", bundle: bundle, comment: "")
      }

      /// en translation: Edit Alarm
      ///
      /// Locales: ja, en
      static func alarmEditAlarm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alarm-edit-alarm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alarm-edit-alarm"
        }

        return NSLocalizedString("alarm-edit-alarm", bundle: bundle, comment: "")
      }

      /// en translation: Faild to connect with ther server. Please wait a while and try later.
      ///
      /// Locales: ja, en
      static func commonFailedToConnectWithTheServer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common-failed-to-connect-with-the-server.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common-failed-to-connect-with-the-server."
        }

        return NSLocalizedString("common-failed-to-connect-with-the-server.", bundle: bundle, comment: "")
      }

      /// en translation: Failed to create an alarm.
      ///
      /// Locales: ja, en
      static func alarmFailedToCreateAnAlarm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alarm-failed-to-create-an-alarm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alarm-failed-to-create-an-alarm"
        }

        return NSLocalizedString("alarm-failed-to-create-an-alarm", bundle: bundle, comment: "")
      }

      /// en translation: Failed to download resources
      ///
      /// Locales: ja, en
      static func profileFailedToDownloadResources(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile-failed-to-download-resources", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile-failed-to-download-resources"
        }

        return NSLocalizedString("profile-failed-to-download-resources", bundle: bundle, comment: "")
      }

      /// en translation: Failed to edit the alarm.
      ///
      /// Locales: ja, en
      static func alarmFailedToEditTheAlarm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alarm-failed-to-edit-the-alarm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alarm-failed-to-edit-the-alarm"
        }

        return NSLocalizedString("alarm-failed-to-edit-the-alarm", bundle: bundle, comment: "")
      }

      /// en translation: Failed to get the alarm list.
      ///
      /// Locales: ja, en
      static func alarmFailedToGetTheAlarmList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alarm-failed-to-get-the-alarm-list", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alarm-failed-to-get-the-alarm-list"
        }

        return NSLocalizedString("alarm-failed-to-get-the-alarm-list", bundle: bundle, comment: "")
      }

      /// en translation: Failed to get the authentication information
      ///
      /// Locales: ja, en
      static func errorFailedToGetAuthenticationInformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error-failed-to-get-authentication-information", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error-failed-to-get-authentication-information"
        }

        return NSLocalizedString("error-failed-to-get-authentication-information", bundle: bundle, comment: "")
      }

      /// en translation: Failed to get the character information
      ///
      /// Locales: ja, en
      static func errorFailedToGetCharacterInformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error-failed-to-get-character-information", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error-failed-to-get-character-information"
        }

        return NSLocalizedString("error-failed-to-get-character-information", bundle: bundle, comment: "")
      }

      /// en translation: Failed to get the character information.
      ///
      /// Locales: ja, en
      static func profileFailedToGetTheCharacterInformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile-failed-to-get-the-character-information", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile-failed-to-get-the-character-information"
        }

        return NSLocalizedString("profile-failed-to-get-the-character-information", bundle: bundle, comment: "")
      }

      /// en translation: Failed to get the character selection information
      ///
      /// Locales: ja, en
      static func errorFailedToGetCharacterSelectionInformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error-failed-to-get-character-selection-information", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error-failed-to-get-character-selection-information"
        }

        return NSLocalizedString("error-failed-to-get-character-selection-information", bundle: bundle, comment: "")
      }

      /// en translation: Failed to get the character's resources
      ///
      /// Locales: ja, en
      static func errorFailedToGetCharactersResources(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error-failed-to-get-characters-resources", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error-failed-to-get-characters-resources"
        }

        return NSLocalizedString("error-failed-to-get-characters-resources", bundle: bundle, comment: "")
      }

      /// en translation: Failed to get the character.
      ///
      /// Locales: ja, en
      static func characterFailedToGetTheCharacter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("character-failed-to-get-the-character", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "character-failed-to-get-the-character"
        }

        return NSLocalizedString("character-failed-to-get-the-character", bundle: bundle, comment: "")
      }

      /// en translation: Failed to get the news.
      ///
      /// Locales: ja, en
      static func newsFailedToGetTheNews(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("news-failed-to-get-the-news", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "news-failed-to-get-the-news"
        }

        return NSLocalizedString("news-failed-to-get-the-news", bundle: bundle, comment: "")
      }

      /// en translation: Failed to get the resource of the character.
      ///
      /// Locales: ja, en
      static func profileFailedToGetTheResourceOfTheCharacter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile-failed-to-get-the-resource-of-the-character", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile-failed-to-get-the-resource-of-the-character"
        }

        return NSLocalizedString("profile-failed-to-get-the-resource-of-the-character", bundle: bundle, comment: "")
      }

      /// en translation: Failed to save user information.
      ///
      /// Locales: ja, en
      static func tutorialFailedToSaveUserInformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial-failed-to-save-user-information", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial-failed-to-save-user-information"
        }

        return NSLocalizedString("tutorial-failed-to-save-user-information", bundle: bundle, comment: "")
      }

      /// en translation: Failed to set character image
      ///
      /// Locales: ja, en
      static func errorFailedToSetCharacterImage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error-failed-to-set-character-image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error-failed-to-set-character-image"
        }

        return NSLocalizedString("error-failed-to-set-character-image", bundle: bundle, comment: "")
      }

      /// en translation: Finally, please allow push notifications, such as to announce the addition of new characters.
      ///
      /// Locales: ja, en
      static func tutorialFinallyPleaseAllowPushNotificaion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial-finally-please-allow-push-notificaion", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial-finally-please-allow-push-notificaion"
        }

        return NSLocalizedString("tutorial-finally-please-allow-push-notificaion", bundle: bundle, comment: "")
      }

      /// en translation: Fri
      ///
      /// Locales: ja, en
      static func dayOfWeekFriday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("day-of-week-friday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "day-of-week-friday"
        }

        return NSLocalizedString("day-of-week-friday", bundle: bundle, comment: "")
      }

      /// en translation: Get a call
      ///
      /// Locales: ja, en
      static func tutorialGetACall(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial-get-a-call", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial-get-a-call"
        }

        return NSLocalizedString("tutorial-get-a-call", bundle: bundle, comment: "")
      }

      /// en translation: Go to home screen
      ///
      /// Locales: ja, en
      static func tutorialGoToHomeScreen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial-go-to-home-screen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial-go-to-home-screen"
        }

        return NSLocalizedString("tutorial-go-to-home-screen", bundle: bundle, comment: "")
      }

      /// en translation: I agree with the privacy policy
      ///
      /// Locales: ja, en
      static func tutorialAgreeWithThePrivacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial-agree-with-the-privacy-policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial-agree-with-the-privacy-policy"
        }

        return NSLocalizedString("tutorial-agree-with-the-privacy-policy", bundle: bundle, comment: "")
      }

      /// en translation: Illustration
      ///
      /// Locales: ja, en
      static func characterIllustration(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("character-illustration", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "character-illustration"
        }

        return NSLocalizedString("character-illustration", bundle: bundle, comment: "")
      }

      /// en translation: Illustration
      ///
      /// Locales: ja, en
      static func profileIllustration(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile-illustration", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile-illustration"
        }

        return NSLocalizedString("profile-illustration", bundle: bundle, comment: "")
      }

      /// en translation: Inquiries about adding characters
      ///
      /// Locales: ja, en
      static func configInquiresAddingCharacters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("config-inquires-adding-characters", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "config-inquires-adding-characters"
        }

        return NSLocalizedString("config-inquires-adding-characters", bundle: bundle, comment: "")
      }

      /// en translation: Inquiries about the app
      ///
      /// Locales: ja, en
      static func configInquiresAboutTheApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("config-inquires-about-the-app", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "config-inquires-about-the-app"
        }

        return NSLocalizedString("config-inquires-about-the-app", bundle: bundle, comment: "")
      }

      /// en translation: Let's try it now!
      ///
      /// Locales: ja, en
      static func tutorialLetUsTryItNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial-let-us-try-it-now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial-let-us-try-it-now"
        }

        return NSLocalizedString("tutorial-let-us-try-it-now", bundle: bundle, comment: "")
      }

      /// en translation: License
      ///
      /// Locales: ja, en
      static func configLicense(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("config-license", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "config-license"
        }

        return NSLocalizedString("config-license", bundle: bundle, comment: "")
      }

      /// en translation: Mon
      ///
      /// Locales: ja, en
      static func dayOfWeekMonday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("day-of-week-monday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "day-of-week-monday"
        }

        return NSLocalizedString("day-of-week-monday", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: ja, en
      static func profileName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile-name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile-name"
        }

        return NSLocalizedString("profile-name", bundle: bundle, comment: "")
      }

      /// en translation: New Alarm
      ///
      /// Locales: ja, en
      static func alarmNewAlarm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alarm-new-alarm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alarm-new-alarm"
        }

        return NSLocalizedString("alarm-new-alarm", bundle: bundle, comment: "")
      }

      /// en translation: News
      ///
      /// Locales: ja, en
      static func newsNews(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("news-news", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "news-news"
        }

        return NSLocalizedString("news-news", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: ja, en
      static func commonNext(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common-next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common-next"
        }

        return NSLocalizedString("common-next", bundle: bundle, comment: "")
      }

      /// en translation: Official Twitter
      ///
      /// Locales: ja, en
      static func configOfficialTwitter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("config-official-twitter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "config-official-twitter"
        }

        return NSLocalizedString("config-official-twitter", bundle: bundle, comment: "")
      }

      /// en translation: Open App Store
      ///
      /// Locales: ja, en
      static func updateRequirdOpenAppStore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("update-requird-open-app-store", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "update-requird-open-app-store"
        }

        return NSLocalizedString("update-requird-open-app-store", bundle: bundle, comment: "")
      }

      /// en translation: Open the privacy policy
      ///
      /// Locales: ja, en
      static func tutorialOpenThePrivacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial-open-the-privacy-policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial-open-the-privacy-policy"
        }

        return NSLocalizedString("tutorial-open-the-privacy-policy", bundle: bundle, comment: "")
      }

      /// en translation: Other
      ///
      /// Locales: ja, en
      static func configOther(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("config-other", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "config-other"
        }

        return NSLocalizedString("config-other", bundle: bundle, comment: "")
      }

      /// en translation: PR
      ///
      /// Locales: ja, en
      static func characterPr(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("character-pr", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "character-pr"
        }

        return NSLocalizedString("character-pr", bundle: bundle, comment: "")
      }

      /// en translation: Please accept the privacy policy
      ///
      /// Locales: ja, en
      static func tutorialPleaseAcceptThePrivacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial-please-accept-the-privacy-policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial-please-accept-the-privacy-policy"
        }

        return NSLocalizedString("tutorial-please-accept-the-privacy-policy", bundle: bundle, comment: "")
      }

      /// en translation: Please choose your favorite character.
      ///
      /// Locales: ja, en
      static func tutorialPleaseChooseYourFavoriteCharacter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial-please-choose-your-favorite-character", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial-please-choose-your-favorite-character"
        }

        return NSLocalizedString("tutorial-please-choose-your-favorite-character", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the alarm name
      ///
      /// Locales: ja, en
      static func alarmPleaseEnterTheAlarmName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alarm-please-enter-the-alarm-name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alarm-please-enter-the-alarm-name"
        }

        return NSLocalizedString("alarm-please-enter-the-alarm-name", bundle: bundle, comment: "")
      }

      /// en translation: Please install the latest version of the app from the store.
      ///
      /// Locales: ja, en
      static func updateRequirdPleaseInstallTheLatestVersion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("update-requird-please-install-the-latest-version", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "update-requird-please-install-the-latest-version"
        }

        return NSLocalizedString("update-requird-please-install-the-latest-version", bundle: bundle, comment: "")
      }

      /// en translation: Profile
      ///
      /// Locales: ja, en
      static func profileProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile-profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile-profile"
        }

        return NSLocalizedString("profile-profile", bundle: bundle, comment: "")
      }

      /// en translation: Reset
      ///
      /// Locales: ja, en
      static func configReset(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("config-reset", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "config-reset"
        }

        return NSLocalizedString("config-reset", bundle: bundle, comment: "")
      }

      /// en translation: Sat
      ///
      /// Locales: ja, en
      static func dayOfWeekSaturday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("day-of-week-saturday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "day-of-week-saturday"
        }

        return NSLocalizedString("day-of-week-saturday", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: ja, en
      static func commonSave(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common-save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common-save"
        }

        return NSLocalizedString("common-save", bundle: bundle, comment: "")
      }

      /// en translation: Show customized ads
      ///
      /// Locales: ja, en
      static func tutorialShowCustomizedAds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial-show-customized-ads", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial-show-customized-ads"
        }

        return NSLocalizedString("tutorial-show-customized-ads", bundle: bundle, comment: "")
      }

      /// en translation: Sun
      ///
      /// Locales: ja, en
      static func dayOfWeekSunday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("day-of-week-sunday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "day-of-week-sunday"
        }

        return NSLocalizedString("day-of-week-sunday", bundle: bundle, comment: "")
      }

      /// en translation: The app needs to be updated.
      ///
      /// Locales: ja, en
      static func updateRequirdTheAppNeedsToBeUpdated(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("update-requird-the-app-needs-to-be-updated", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "update-requird-the-app-needs-to-be-updated"
        }

        return NSLocalizedString("update-requird-the-app-needs-to-be-updated", bundle: bundle, comment: "")
      }

      /// en translation: This app is an app that the character calls at the time you set.
      ///
      /// Locales: ja, en
      static func tutorialThisIsAnApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial-this-is-an-app", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial-this-is-an-app"
        }

        return NSLocalizedString("tutorial-this-is-an-app", bundle: bundle, comment: "")
      }

      /// en translation: This feature is not available in your region
      ///
      /// Locales: ja, en
      static func errorThisFeatureIsNotAvailableInYourRegion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error-this-feature-is-not-available-in-your-region", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error-this-feature-is-not-available-in-your-region"
        }

        return NSLocalizedString("error-this-feature-is-not-available-in-your-region", bundle: bundle, comment: "")
      }

      /// en translation: Thu
      ///
      /// Locales: ja, en
      static func dayOfWeekThursday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("day-of-week-thursday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "day-of-week-thursday"
        }

        return NSLocalizedString("day-of-week-thursday", bundle: bundle, comment: "")
      }

      /// en translation: Tue
      ///
      /// Locales: ja, en
      static func dayOfWeekTuesday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("day-of-week-tuesday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "day-of-week-tuesday"
        }

        return NSLocalizedString("day-of-week-tuesday", bundle: bundle, comment: "")
      }

      /// en translation: Update Requird
      ///
      /// Locales: ja, en
      static func updateRequirdUpdateRequird(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("update-requird-update-requird", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "update-requird-update-requird"
        }

        return NSLocalizedString("update-requird-update-requird", bundle: bundle, comment: "")
      }

      /// en translation: User Info
      ///
      /// Locales: ja, en
      static func configUserInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("config-user-info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "config-user-info"
        }

        return NSLocalizedString("config-user-info", bundle: bundle, comment: "")
      }

      /// en translation: User Info
      ///
      /// Locales: ja, en
      static func userInfoUserInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user-info-user-info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user-info-user-info"
        }

        return NSLocalizedString("user-info-user-info", bundle: bundle, comment: "")
      }

      /// en translation: User Name
      ///
      /// Locales: ja, en
      static func userInfoUserName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user-info-user-name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user-info-user-name"
        }

        return NSLocalizedString("user-info-user-name", bundle: bundle, comment: "")
      }

      /// en translation: Version Info
      ///
      /// Locales: ja, en
      static func configVersionInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("config-version-info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "config-version-info"
        }

        return NSLocalizedString("config-version-info", bundle: bundle, comment: "")
      }

      /// en translation: Voice
      ///
      /// Locales: ja, en
      static func characterVoice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("character-voice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "character-voice"
        }

        return NSLocalizedString("character-voice", bundle: bundle, comment: "")
      }

      /// en translation: Voice
      ///
      /// Locales: ja, en
      static func profileVoice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile-voice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile-voice"
        }

        return NSLocalizedString("profile-voice", bundle: bundle, comment: "")
      }

      /// en translation: Want to call this character?
      ///
      /// Locales: ja, en
      static func profileWantToCallThisCharacter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile-want-to-call-this-character", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile-want-to-call-this-character"
        }

        return NSLocalizedString("profile-want-to-call-this-character", bundle: bundle, comment: "")
      }

      /// en translation: Want to publish your character  with this app?  Click here for details!!
      ///
      /// Locales: ja, en
      static func characterWantToPublishYourCharacter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("character-want-to-publish-your-character", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "character-want-to-publish-your-character"
        }

        return NSLocalizedString("character-want-to-publish-your-character", bundle: bundle, comment: "")
      }

      /// en translation: Wed
      ///
      /// Locales: ja, en
      static func dayOfWeekWednesday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("day-of-week-wednesday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "day-of-week-wednesday"
        }

        return NSLocalizedString("day-of-week-wednesday", bundle: bundle, comment: "")
      }

      /// en translation: Welcome to Charalarm!!
      ///
      /// Locales: ja, en
      static func tutorialWelcomeToCharalarm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial-welcome-to-charalarm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial-welcome-to-charalarm"
        }

        return NSLocalizedString("tutorial-welcome-to-charalarm", bundle: bundle, comment: "")
      }

      /// en translation: Yes!!
      ///
      /// Locales: ja, en
      static func profileYes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile-yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile-yes"
        }

        return NSLocalizedString("profile-yes", bundle: bundle, comment: "")
      }

      /// en translation: You can create up to three alarms.
      ///
      /// Locales: ja, en
      static func alarmYouCanCreateUpToThreeAlarms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alarm-you-can-create-up-to-three-alarms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alarm-you-can-create-up-to-three-alarms"
        }

        return NSLocalizedString("alarm-you-can-create-up-to-three-alarms", bundle: bundle, comment: "")
      }

      /// en translation: You can see the characters that can receive incoming calls from the character list.
      ///
      /// Locales: ja, en
      static func tutorialYouCanSeeTheCharacters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial-you-can-see-the-characters", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial-you-can-see-the-characters"
        }

        return NSLocalizedString("tutorial-you-can-see-the-characters", bundle: bundle, comment: "")
      }

      /// en translation: You can set multiple alarms by specifying the time and day of the week.
      ///
      /// Locales: ja, en
      static func tutorialYouCanSetMultipleAlarms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial-you-can-set-multiple-alarms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial-you-can-set-multiple-alarms"
        }

        return NSLocalizedString("tutorial-you-can-set-multiple-alarms", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
